from __future__ import absolute_import
__import__("pkg_resources").declare_namespace(__name__)

from ...utils import compute_lambda_tilde , compute_delta_lambda
from ..... import MTSUN_SI

#####################################################
#                                                   #
#           List of empirical relations             #
#                                                   #
#####################################################

#Amerg
# (-4.688308030677957, 16929.294579486428, 0.0775373766260463, 4.696893573416992e-05, -1.2371936265171986, -0.0012930644279764137, 41163.05215414393, 39648.94266832759, 34894.66152431571, 47532.559449692, 59595.20692491913, 31959.048298842925, 58517.580374209254, 37276.80848225365)
# Range = [ 0.15896463384536688 , 0.3128785424701221 ]
# Sum res. sq. =  0.3652046792847893
# Rel. st. dev. =  0.024528656345238296
# KL divergence =  0.2645083547235313

#F0
# (0.40862816717771844, 4.444924422398863e-25, -4133.436829196272, 378.4675076343372, 9956.626050731495, 11047.415906642473, 19997.554870399355, 3735.2768530308763, 6536.994682929821, 3407.7468663355467, 639.3648437169758, 13.476441073357678, -7940.209846129864, 13.622444632943537)
# Range = [ 0.009369001919385797 , 0.01967085069063802 ]
# Sum res. sq. =  3.509929082221311
# Rel. st. dev. =  0.11058805566455786
# KL divergence =  0.022712115097639714

__CS__ = {  'f_2':      (0.12862203709414494, -1642.5491660941152,
                         395.0869803786168, 0.25718834491733417, 659.1568831583356, 1.9194034003663298,
                         -22.558553383656808, -40.52711350914581, -17.453044398329325, -35.270964047033466,
                         50.649600248024164, -1.5009769983160604, 68.23609080734613, 15.83391133560841),
            'f_0':      (0.40862816717771844, 4.444924422398863e-25,
                         -4133.436829196272, 378.4675076343372, 9956.626050731495, 11047.415906642473,
                         19997.554870399355, 3735.2768530308763, 6536.994682929821, 3407.7468663355467,
                         639.3648437169758, 13.476441073357678, -7940.209846129864, 13.622444632943537),
            'f_m':      (1268.9526688832184, 4399.615903106789,
                         0.0320179583177276, 1.16188880450384e-05, 1376.719486584435, 1.343851091566992,
                         -0.0015579091874009323, 0.000321145804146936, -0.0007718719688255781,-0.00018252634688449757,
                         -1.227930237748257, -1.189124138027239, -1.2314000315577138, -1.3586230384982187),
            'a_m':      (-4.688308030677957, 16929.294579486428,
                         0.0775373766260463, 4.696893573416992e-05, -1.2371936265171986, -0.0012930644279764137,
                         41163.05215414393, 39648.94266832759, 34894.66152431571, 47532.559449692,
                         59595.20692491913, 31959.048298842925, 58517.580374209254, 37276.80848225365),
            '1_t_0':    (-0.030819715268445957, 9183.439051472584,
                         23145.23745099326, 0.9230289236945828, -25658.165182528166, -14.441052512912252,
                         -163.30505158996883, -1699.279475512381, -104.16062212393668, -424.26368933726417,
                         -1.8591689978080774, -45.97171962493276, -0.967169311014858, -6.844387314424529),
            'a_0':      (0.015569900844799924, 17.797920542462883,
                         -61.20008330484486, 0.48571003394674056, -47.26000448084579, 0.3794725688350802,
                         -26.46797743494567, -3.065456075078537, -30.19705113239756, -3.4487876272069697,
                         166.3864622378812, 16.5558772669917, 144.96802125819858, 13.490164646124928),
            'a_1':      (-0.1811075085546079, 194772.89337080123,
                         -20.68858415013775, 16.8357132651526, 477.21771119212895, -18.621760416538855,
                         27258.857403231737, 1.0083373763908094, 1092.0362196068422, -2.121580484289504,
                         -15794406.019839253, -335.24202360504916, -766943.8526300694, -663.9299585072785),
            'a_2':      (0.1981737449555965, 12580.317206690459,
                         1561.0368751155775, -0.4681052191822618, 2231.340141727319, 0.4001876386847557,
                         0.04170612262858395, -0.045251385181996964, -0.003069649230758747, 0.5460134968309053,
                         -40.482162938927296, -59.10592031971812, -49.763652935236266, 31.698536561741598),
            'a_3':      (0.14787852387228265, 152.46059193580135,
                         1213.0567448959346, 0.09536533881740619, 1058.1151333819757, 0.43360188615412754,
                         0.8043987721556679, 12.281790366680315, 0.25628841897525095, 7.789092701929106,
                         -2408.5290066697794, -78.98289043457628, -3923.229013168348, -39.406769735085206),
            'df_m':     (0.0033215556577333807, 8.007733818827841,
                         53.40024620363712, -2.2285384530112475e-05, 113.20016243224902, 0.5263489040136915,
                         -0.0025125037952244095, -0.1889895973480728, 0.01798511102792604, -0.003035850067814497,
                         -3.2248838339574295, -11.859787671692294, -7.371458483465706, 1.3832439018220908),
            'B_2':      (-0.035016781355681856, 9301.17384411454,
                         -0.0020045090802003063, 1.539376701002597e-05, -0.0005676910989120095, -0.00016422042770759373,
                         4.345055828184551, -0.3508766092101503, -101.47445494154368, -0.6067096364881969,
                         5703.009145610009, 1912.7337753096538, -202068.65102992687, 1801.4047747849775)
}

__THRS__ = {    'f_2':      300,
                'f_0':      300,
                'f_m':      100,
                'a_m':      100,
                '1_t_0':    100,
                'a_0':      150,
                'a_1':      310,
                'a_2':      100,
                'a_3':      100,
                'df_m':     100,
                'B_2':      300
}

__ERRS__ = {    'f_2':      0.04061820537320798,
                'f_0':      0.11058805566455786,
                'f_m':      0.026107153109267662,
                'a_m':      0.024528656345238296,
                '1_t_0':    0.0916616323497195,
                'a_0':      0.6422781929114078,
                'a_1':      0.1535518462666431,
                'a_2':      0.4009701279957612,
                'a_3':      0.2799118605329357,
                'df_m':     0.4772391446655971,
                'B_2':      0.26649020587132427
}

__recalib_names__ = list(__CS__.keys())

def __fit_func__(pars, key):
    # get coefficients and params
    Q0, cx, n1, n2, d1, d2, n1_l, n2_l, d1_l, d2_l, n1_c, n2_c, d1_c, d2_c = __CS__[key]
    lt,dl,chi,xnu = pars['lambdat'], pars['dlambda'], pars['chi_eff'], pars['X']
    # internal coefficients
    xi  = lt + cx * xnu
    _n1 = n1 * ( 1. + n1_l * dl + n1_c * chi )
    _n2 = n2 * ( 1. + n2_l * dl + n2_c * chi )
    _d1 = d1 * ( 1. + d1_l * dl + d1_c * chi )
    _d2 = d2 * ( 1. + d2_l * dl + d2_c * chi )
    # compute fit
    if xi < __THRS__[key]:
        num = 1.+ _n1 * __THRS__[key] + _n2 * __THRS__[key] **2
        den = 1.+ _d1 * __THRS__[key] + _d2 * __THRS__[key] **2
        dnm = (_n1-_d1)+ 2.*(_n2-_d2) * __THRS__[key] + (_n2*_d1-_d2*_n1) * __THRS__[key] **2
        return Q0 * (num/den + dnm*(xi - __THRS__[key])/den**2)
    else:
        return Q0 * (1.+ _n1 * xi + _n2 * xi **2) / (1.+ _d1 * xi + _d2 * xi **2)

def _nrpmw_fits(pars, recalib=False):
    """
        Compute PM empirical relations given pars (dict)
    """

    # calibrated    : f_0, t_0, f_2, f_m, a_m, a_0, a_1, a_2, a_3, df_m, B_2
    # uncalibrated  : t_c, phi_pm, df_2, Delta, Gamma

    # set variables
    pars['nu']      = pars['q']/(1.+pars['q'])**2.
    pars['X']       = 1. - 4.*pars['nu']

    m1              = pars['mtot']/(1. + 1./pars['q'])
    m2              = pars['mtot']/(1. + pars['q'])
    pars['chi_eff'] = (pars['s1z'] * pars['q'] + pars['s2z']) / (1. + pars['q'])
    pars['lambdat'] = compute_lambda_tilde(m1, m2, pars['lambda1'], pars['lambda2'])
    pars['dlambda'] = compute_delta_lambda(m1, m2, pars['lambda1'], pars['lambda2'])

    # compute fits
    if recalib:
        fits = {ki : __fit_func__(pars, ki)*(1.+pars['NRPMw_recal_'+ki]) for ki in __recalib_names__}
    else:
        fits = {ki : __fit_func__(pars, ki) for ki in __recalib_names__}

    # join dicts
    pars = {**pars, **fits}

    # check amplitudes
    pars['a_0']  = max(1e-10,pars['a_0'])
    pars['a_1']  = max(1e-10,pars['a_1'])
    pars['a_2']  = max(0.,pars['a_2'])
    pars['a_3']  = max(1e-10,pars['a_3'])
    pars['B_2']  = max(0.,pars['B_2'])

    # set times
    pars['f_0']  = pars['f_0']/2.
    pars['t_0']  = 1./pars['1_t_0']
    dt0          = 0.5/pars['f_0']
    pars['t_1']  = min(pars['NRPMw_t_coll'], pars['t_0'] + dt0)
    pars['t_2']  = min(pars['NRPMw_t_coll'], pars['t_0'] + 2.*dt0)
    pars['t_3']  = min(pars['NRPMw_t_coll'], pars['t_0'] + 3.*dt0)

    return pars

from .nrpmw import NRPMw
